{"version":3,"sources":["../src/repo.js"],"names":["createRepo","schemas","reducersAndSagas","reduce","acc","schema","operations","types","reducers","name","sagas","buildSagasFor","rootReducer","rootSaga","map","store","buildRepoOperations","repoOperations","selectors","__store__","update","changes","tap","updateAll","delete","deleteAll","insert","insertAll","load","getById","all"],"mappings":"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","file":"repo.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { fork } from 'redux-saga/effects';\n\nimport { buildOperations, buildTypes, buildOperationsWithStore } from './actions';\nimport { buildSagaFor } from './sagas';\nimport { buildReducerFor } from './reducer';\nimport { buildSelectors } from './selectors';\nimport { configureStore } from './store';\n\nexport const createRepo = (schemas) => {\n  const reducersAndSagas = schemas.reduce((acc, schema) => {\n    const operations = buildOperations(schema)\n    const types = buildTypes(schema)\n\n    return {\n      ...acc,\n      reducers: {\n        ...acc.reducers,\n        [schema.name]: buildReducerFor(types, schema)\n      },\n      sagas: [\n        ...acc.sagas,\n        ...buildSagasFor(types, operations, schema)\n      ]\n    }\n  }, {})\n\n  const rootReducer = combineReducers(reducersAndSagas.reducers)\n  const rootSaga = function * () {\n    yield reducersAndSagas.sagas.map(fork)\n  }\n\n  const store = configureStore(rootReducer, rootSaga)\n  const buildRepoOperations = buildOperationsWithStore(store)\n\n  const repoOperations = schemas.reduce((acc, schema) => {\n    const operations = buildRepoOperations(schema)\n    const selectors = buildSelectors(schema)\n    return {\n      ...acc,\n      [schema.name]: {\n        ...operations,\n        ...selectors\n      }\n    }\n  }, {})\n\n  return {\n    __store__: store,\n    ...repoOperations,\n    update: (schema, changes) => repoOperations[schema.name].update.tap(changes),\n    updateAll: (schema, changes) => repoOperations[schema.name].updateAll.tap(changes),\n    delete: (schema, changes) => repoOperations[schema.name].delete.tap(changes),\n    deleteAll: (schema, changes) => repoOperations[schema.name].deleteAll.tap(changes),\n    insert: (schema, changes) => repoOperations[schema.name].insert.tap(changes),\n    insertAll: (schema, changes) => repoOperations[schema.name].insertAll.tap(changes),\n    load: (schema, changes) => repoOperations[schema.name].load.tap(changes),\n\n    getById: (schema) => repoOperations[schema.name].getById(),\n    all: (schema) => repoOperations[schema.name].all(),\n  }\n}\n"]}