{"version":3,"sources":["../src/actions.js"],"names":["actions","operations","actionName","action","actionType","operation","schema","name","toUpperCase","build","typeBuilder","reduce","acc","acc1","buildTypes","type","buildOperations","payload","buildOperationsWithStore","store","dispatch"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,UAAU,CAAC,KAAD,EAAQ,SAAR,EAAmB,SAAnB,EAA8B,YAA9B,EAA4C,kBAA5C,CAAhB;AACO,IAAMC,kCAAa,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,QAAhC,EAA0C,WAA1C,EAAuD,QAAvD,EAAiE,WAAjE,CAAnB;;AAEP,IAAMC,aAAa,SAAbA,UAAa,CAACC,MAAD;AAAA,SAAY,yBAAUA,MAAV,CAAZ;AAAA,CAAnB;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACC,SAAD,EAAYF,MAAZ,EAAoBG,MAApB;AAAA,SACjB,WAAQ,yBAAUA,OAAOC,IAAjB,CAAR,SAAkC,yBAAUF,SAAV,CAAlC,SAA0D,yBAAUF,MAAV,CAA1D,EAA8EK,WAA9E,EADiB;AAAA,CAAnB;;AAGA,IAAMC,QAAQ,SAARA,KAAQ,CAACC,WAAD;AAAA,SAAiB,UAACJ,MAAD,EAAY;AACzC,WAAOL,WAAWU,MAAX,CAAkB,UAACC,GAAD,EAAMP,SAAN,EAAoB;AAC3C,0BACKO,GADL,sBAEGP,SAFH,EAEeL,QAAQW,MAAR,CAAe,UAACE,IAAD,EAAOV,MAAP,EAAkB;AAC5C,4BACKU,IADL,sBAEGV,MAFH,EAEYO,YAAYN,WAAWC,SAAX,EAAsBF,MAAtB,EAA8BG,MAA9B,CAAZ,CAFZ;AAID,OALY,EAKV,EALU,CAFf;AASD,KAVM,EAUJ,EAVI,CAAP;AAWD,GAZa;AAAA,CAAd;;AAcO,IAAMQ,kCAAaL,MAAM;AAAA,SAAQM,IAAR;AAAA,CAAN,CAAnB;AACA,IAAMC,4CAAkBP,MAAM;AAAA,SAAQ,UAACQ,OAAD;AAAA,WAAc,EAAEF,UAAF,EAAQE,gBAAR,EAAd;AAAA,GAAR;AAAA,CAAN,CAAxB;AACA,IAAMC,8DAA2B,SAA3BA,wBAA2B,CAACC,KAAD;AAAA,SAAWV,MAAM;AAAA,WAAQ,UAACQ,OAAD;AAAA,aAAaE,MAAMC,QAAN,CAAe,EAAEL,UAAF,EAAQE,gBAAR,EAAf,CAAb;AAAA,KAAR;AAAA,GAAN,CAAX;AAAA,CAAjC","file":"actions.js","sourcesContent":["import snakeCase from 'lodash/snakeCase';\n\nconst actions = ['tap', 'success', 'failure', 'optimistic', 'revertOptimistic']\nexport const operations = ['load', 'update', 'updateAll', 'delete', 'deleteAll', 'insert', 'insertAll']\n\nconst actionName = (action) => snakeCase(action)\n\nconst actionType = (operation, action, schema) =>\n  `REPO/${snakeCase(schema.name)}/${snakeCase(operation)}/${snakeCase(action)}`.toUpperCase();\n\nconst build = (typeBuilder) => (schema) => {\n  return operations.reduce((acc, operation) => {\n    return {\n      ...acc,\n      [operation]: actions.reduce((acc1, action) => {\n        return {\n          ...acc1,\n          [action]: typeBuilder(actionType(operation, action, schema)),\n        }\n      }, {})\n    }\n  }, {})\n}\n\nexport const buildTypes = build(type => type)\nexport const buildOperations = build(type => (payload) => ({ type, payload }))\nexport const buildOperationsWithStore = (store) => build(type => (payload) => store.dispatch({ type, payload }))\n"]}