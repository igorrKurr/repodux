{"version":3,"sources":["../src/sagas.js"],"names":["buildSagasFor","types","operations","schema","loadFlow","watchLoadFlow","insertAllFlow","watchInsertAllFlow","insertFlow","watchInsertFlow","updateFlow","watchUpdateFlow","updateAllFlow","watchUpdateAllFlow","deleteFlow","watchDeleteFlow","deleteAllFlow","watchDeleteAllFlow","urls","data","http","auth","load","authRequest","request","response","insertAll","success","changeset","failure","error","tap","method","body","JSON","stringify","insert","update","updateAll","delete","deleteAll"],"mappings":"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","file":"sagas.js","sourcesContent":["import flatten from 'lodash/flatten'\nimport { put, call, takeLatest, fork } from 'redux-saga/effects';\n\nexport const buildSagasFor = (types, operations, schema) => {\n  const urls = schema.urls\n\n  function * loadFlow(data) {\n    try {\n      const http = schema.auth.load ? authRequest : request;\n\n      const response = yield call(http, urls.load(data));\n      return yield put(operations.insertAll.success(schema.changeset.insertAll(response)));\n    } catch (error) {\n      return yield put(operations.insertAll.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchLoadFlow() {\n    yield takeLatest(operations.load.tap, loadFlow);\n  }\n\n  function * insertAllFlow(data) {\n    try {\n      const http = schema.auth.insertAll ? authRequest : request;\n\n      const response = yield call(http, urls.insertAll(data), {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      yield put(operations.insertAll.success(schema.changeset.insertAll(response)));\n    } catch (error) {\n      yield put(operations.insertAll.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchInsertAllFlow() {\n    yield takeLatest(operations.insertAll.tap, insertAllFlow);\n  }\n\n  function * insertFlow(data) {\n    try {\n      const http = schema.auth.insert ? authRequest : request;\n\n      const response = yield call(http, urls.insert(data), {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      yield put(operations.insert.success(schema.changeset.insert(response)));\n    } catch (error) {\n      yield put(operations.insert.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchInsertFlow() {\n    yield takeLatest(operations.insertAll.tap, insertFlow);\n  }\n\n  function * updateFlow(data) {\n    try {\n      const http = schema.auth.update ? authRequest : request;\n\n      const response = yield call(http, urls.update(data), {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      });\n      yield put(operations.update.success(schema.changeset.update(response)));\n    } catch (error) {\n      yield put(operations.update.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchUpdateFlow() {\n    yield takeLatest(operations.update.tap, updateFlow);\n  }\n\n  function * updateAllFlow(data) {\n    try {\n      const http = schema.auth.updateAll ? authRequest : request;\n\n      const response = yield call(http, urls.updateAll(data), {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      });\n      yield put(operations.updateAll.success(schema.changeset.updateAll(response)));\n    } catch (error) {\n      yield put(operations.updateAll.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchUpdateAllFlow() {\n    yield takeLatest(operations.updateAll.tap, updateAllFlow);\n  }\n\n  function * deleteFlow(data) {\n    try {\n      const http = schema.auth.delete ? authRequest : request;\n\n      const response = yield call(http, urls.delete(data), {\n        method: 'DELETE',\n        body: JSON.stringify(data),\n      });\n      yield put(operations.delete.success(schema.changeset.delete(response)));\n    } catch (error) {\n      yield put(operations.delete.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchDeleteFlow() {\n    yield takeLatest(operations.delete.tap, deleteAllFlow);\n  }\n\n  function * deleteAllFlow(data) {\n    try {\n      const http = schema.auth.deleteAll ? authRequest : request;\n\n      const response = yield call(http, urls.deleteAll(data), {\n        method: 'DELETE',\n        body: JSON.stringify(data),\n      });\n      yield put(operations.deleteAll.success(schema.changeset.deleteAll(response)));\n    } catch (error) {\n      yield put(operations.deleteAll.failure(schema.changeset.error(error)));\n    }\n  }\n\n  function * watchDeleteAllFlow() {\n    yield takeLatest(operations.deleteAll.tap, deleteAllFlow);\n  }\n\n  return [\n    watchDeleteAllFlow,\n    watchDeleteFlow,\n    watchUpdateAllFlow,\n    watchUpdateFlow,\n    watchInsertFlow,\n    watchInsertAllFlow,\n    watchLoadFlow,\n  ]\n}\n"]}