{"version":3,"sources":["../src/reducer.js"],"names":["buildReducerFor","types","schema","initialState","items","handlers","update","success","state","payload","setIn","id","updateAll","merge","insert","insertAll","set","delete","without","deleteAll","ids","reducer","action","type","handler"],"mappings":";;;;;;;AAAA;;;;;;;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAAA;;AAChD,MAAMC,eAAe,iCAAU;AAC7BC,WAAO;AADsB,GAAV,CAArB;;AAIA,MAAMC,uDACHJ,MAAMK,MAAN,CAAaC,OADV,EACoB,UAACC,KAAD,QAAwB;AAAA,QAAdC,OAAc,QAAdA,OAAc;;AAC9C,WAAOD,MAAME,KAAN,CAAY,CAAC,OAAD,EAAUD,QAAQP,OAAOS,EAAf,CAAV,CAAZ,EAA2CF,OAA3C,CAAP;AACD,GAHG,8BAIHR,MAAMW,SAAN,CAAgBL,OAJb,EAIuB,UAACC,KAAD,SAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AACjD,WAAOD,MAAMF,MAAN,CAAa,OAAb,EAAsB,UAACF,KAAD;AAAA,aAAWA,MAAMS,KAAN,CAAYJ,OAAZ,CAAX;AAAA,KAAtB,CAAP;AACD,GANG,8BAOHR,MAAMa,MAAN,CAAaP,OAPV,EAOoB,UAACC,KAAD,SAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AAC9C,WAAOD,MAAME,KAAN,CAAY,CAAC,OAAD,EAAUD,QAAQP,OAAOS,EAAf,CAAV,CAAZ,EAA2CF,OAA3C,CAAP;AACD,GATG,8BAUHR,MAAMc,SAAN,CAAgBR,OAVb,EAUuB,UAACC,KAAD,SAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AACjD,WAAOD,MAAMQ,GAAN,CAAU,OAAV,EAAmBP,OAAnB,CAAP;AACD,GAZG,8BAaHR,MAAMgB,MAAN,CAAaV,OAbV,EAaoB,UAACC,KAAD,SAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AAC9C,WAAOD,MAAMF,MAAN,CAAa,OAAb,EAAsB,UAACF,KAAD;AAAA,aAAWA,MAAMc,OAAN,CAAcT,QAAQP,OAAOS,EAAf,CAAd,CAAX;AAAA,KAAtB,CAAP;AACD,GAfG,8BAgBHV,MAAMkB,SAAN,CAAgBZ,OAhBb,EAgBuB,UAACC,KAAD,SAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AACjD,QAAMW,MAAMX,QAAQW,GAApB;AACA,QAAI,CAACA,GAAL,EAAU;AACR,aAAOZ,KAAP;AACD;AACD,WAAOA,MAAMF,MAAN,CAAa,OAAb,EAAsB,UAACF,KAAD;AAAA,aAAWA,MAAMc,OAAN,CAAcE,GAAd,CAAX;AAAA,KAAtB,CAAP;AACD,GAtBG,aAAN;;AAyBA,MAAMC,UAAU,SAAVA,OAAU,GAAkC;AAAA,QAAjCb,KAAiC,uEAAzBL,YAAyB;AAAA,QAAXmB,MAAW;;AAChD,QAAI,CAACA,MAAL,EAAa;AACX,aAAOd,KAAP;AACD;;AAED,QAAI,CAACc,OAAOC,IAAZ,EAAkB;AAChB,aAAOf,KAAP;AACD;;AAED,QAAMgB,UAAUnB,SAASiB,OAAOC,IAAhB,CAAhB;;AAEA,QAAI,CAACC,OAAL,EAAc;AACZ,aAAOhB,KAAP;AACD;;AAED,WAAOgB,QAAQhB,KAAR,EAAec,MAAf,CAAP;AACD,GAhBD;;AAkBA,SAAOD,OAAP;AACD,CAjDM","file":"reducer.js","sourcesContent":["import Immutable from 'seamless-immutable';\n\nexport const buildReducerFor = (types, schema) => {\n  const initialState = Immutable({\n    items: {}\n  });\n\n  const handlers = {\n    [types.update.success]: (state, { payload }) => {\n      return state.setIn(['items', payload[schema.id]], payload);\n    },\n    [types.updateAll.success]: (state, { payload }) => {\n      return state.update('items', (items) => items.merge(payload))\n    },\n    [types.insert.success]: (state, { payload }) => {\n      return state.setIn(['items', payload[schema.id]], payload);\n    },\n    [types.insertAll.success]: (state, { payload }) => {\n      return state.set('items', payload);\n    },\n    [types.delete.success]: (state, { payload }) => {\n      return state.update('items', (items) => items.without(payload[schema.id]))\n    },\n    [types.deleteAll.success]: (state, { payload }) => {\n      const ids = payload.ids;\n      if (!ids) {\n        return state;\n      }\n      return state.update('items', (items) => items.without(ids))\n    },\n  };\n\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n    \n    if (!action.type) {\n      return state\n    }\n\n    const handler = handlers[action.type]\n\n    if (!handler) {\n      return state\n    }\n\n    return handler(state, action)\n  }\n\n  return reducer\n}\n"]}