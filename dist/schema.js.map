{"version":3,"sources":["../src/schema.js"],"names":["buildUrl","apiUrl","opts","method","params","resource","name","id","identity","x","buildChangeset","schema","createSchema","urlBuilder","changesetBuilder","urls","reduce","acc","operation","changeset"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,MAAD,EAASC,IAAT;AAAA,SAAkB,UAACC,MAAD;AAAA,WAAY,UAACC,MAAD,EAAY;AACzD,UAAMC,WAAW,2BAAUH,KAAKI,IAAf,CAAjB;AACA,UAAMC,KAAKL,KAAKK,EAAhB;AACA,UAAIJ,WAAW,QAAf,EAAyB;AACvB,eAAUF,MAAV,SAAoBI,QAApB;AACD,OAFD,MAEO,IAAIF,WAAW,QAAf,EAAyB;AAC9B,eAAUF,MAAV,SAAoBI,QAApB,SAAgCD,OAAOG,EAAP,CAAhC;AACD,OAFM,MAEA,IAAIJ,WAAW,QAAf,EAAyB;AAC9B,eAAUF,MAAV,SAAoBI,QAApB,SAAgCD,OAAOG,EAAP,CAAhC;AACD,OAFM,MAEA,IAAIJ,WAAW,MAAf,EAAuB;AAC5B,eAAUF,MAAV,SAAoBI,QAApB;AACD,OAFM,MAEA;AACL,eAAUJ,MAAV,SAAoBI,QAApB;AACD;AACF,KAdkC;AAAA,GAAlB;AAAA,CAAjB;;AAgBA,IAAMG,WAAW,SAAXA,QAAW,CAACC,CAAD;AAAA,SAAOA,CAAP;AAAA,CAAjB;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACR,IAAD;AAAA,SAAU,UAACS,MAAD;AAAA,WAAYH,QAAZ;AAAA,GAAV;AAAA,CAAvB;;AAEO,IAAMI,sCAAe,SAAfA,YAAe,CAACV,IAAD,EAAU;AACpC,MAAMD,SAASC,KAAKD,MAApB;AACA,MAAMK,OAAOJ,KAAKI,IAAlB;AACA,MAAMC,KAAKL,KAAKK,EAAhB;AACA,MAAI,CAACN,MAAL,EAAa;AACX,UAAM,oBAAN;AACD;AACD,MAAI,CAACK,IAAL,EAAW;AACT,UAAM,iBAAN;AACD;AACD,MAAI,CAACC,EAAL,EAAS;AACP,UAAM,eAAN;AACD;AACD,MAAMM,aAAab,SAASC,MAAT,EAAiBK,IAAjB,CAAnB;AACA,MAAMQ,mBAAmBJ,eAAeR,IAAf,CAAzB;;AAEA,MAAMa,OAAO,oBAAWC,MAAX,CAAkB,UAACC,GAAD,EAAMC,SAAN,EAAoB;AACjD,wBACKD,GADL,sBAEGC,SAFH,EAEeL,WAAWK,SAAX,CAFf;AAID,GALY,EAKV,EALU,CAAb;;AAOA,MAAMC,YAAY,oBAAWH,MAAX,CAAkB,UAACC,GAAD,EAAMC,SAAN,EAAoB;AACtD,wBACKD,GADL,sBAEGC,SAFH,EAEeJ,iBAAiBI,SAAjB,CAFf;AAID,GALiB,EAKf,EALe,CAAlB;;AAOA;AACEH,cADF;AAEEI;AAFF,KAGKjB,IAHL;AAKD,CAnCM","file":"schema.js","sourcesContent":["import { pluralize } from 'inflection';\nimport { operations } from './actions';\n\nconst buildUrl = (apiUrl, opts) => (method) => (params) => { \n  const resource = pluralize(opts.name)\n  const id = opts.id\n  if (method === 'insert') {\n    return `${apiUrl}/${resource}`\n  } else if (method === 'delete') {\n    return `${apiUrl}/${resource}/${params[id]}`\n  } else if (method === 'update') {\n    return `${apiUrl}/${resource}/${params[id]}`\n  } else if (method === 'load') {\n    return `${apiUrl}/${resource}`\n  } else {\n    return `${apiUrl}/${resource}`\n  }\n}\n\nconst identity = (x) => x\n\nconst buildChangeset = (opts) => (schema) => identity\n\nexport const createSchema = (opts) => {\n  const apiUrl = opts.apiUrl\n  const name = opts.name\n  const id = opts.id\n  if (!apiUrl) {\n    throw 'Api url is reqired'\n  }\n  if (!name) {\n    throw 'Name is reqired'\n  }\n  if (!id) {\n    throw 'ID is reqired'\n  }\n  const urlBuilder = buildUrl(apiUrl, name)\n  const changesetBuilder = buildChangeset(opts)\n\n  const urls = operations.reduce((acc, operation) => {\n    return {\n      ...acc,\n      [operation]: urlBuilder(operation)\n    }\n  }, {})\n  \n  const changeset = operations.reduce((acc, operation) => {\n    return {\n      ...acc,\n      [operation]: changesetBuilder(operation)\n    }\n  }, {})\n\n  return {\n    urls,\n    changeset,\n    ...opts\n  }\n}\n"]}